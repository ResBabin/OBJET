<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="adminMapper">
	<!-- =========회원============ -->
	<!-- 회원 조회 -->
	<!-- <select id="selectUsers" resultType="Userm">
		select userid, nickname,
		username, blackyn, enrolldate, quityn, count(reportedu) as
		"reportcount" from users
		left join reportudetail on (userid = reportedu)
		where userid not like '%admin%'
		group by userid, nickname,
		username,
		blackyn, enrolldate, quityn
		order by userid
	</select> -->
	 <!--  <select id="selectUsers" resultType="Userm" parameterType="map">
		select * from ( select *
		from ( select distinct userid, nickname, username, blackyn, enrolldate, quityn, reportedu, usertype, count(reportedu) as "reportcount"
		from users left join reportudetail on (userid = reportedu)
		group by userid, nickname, username, blackyn, enrolldate, quityn, reportedu, usertype
		order by userid asc)
		where usertype like '%USER%' )
		<if test="startRow != null">
		<![CDATA[where rownum >= #{startRow} and rownum <= #{endRow}]]>
		</if>
	  </select>
	 -->
	  <select id="selectUsers" resultType="Userm" parameterType="map">
	select nickname ,username ,userid, enrolldate, blackyn,  quityn, usertype, "reportcount"
	from (select nickname ,username ,userid, enrolldate, blackyn, quityn, usertype,
	count(reportedu) as "reportcount", row_number() over(order by userid asc) rnum from users left join reportudetail on (userid = reportedu)
	where usertype = 'USER' group by nickname, username, userid, enrolldate, quityn, usertype, blackyn)
	where rnum between #{startRow} and #{endRow}
	  </select>
	
	<!-- 회원 타입별 조회 및 정렬 조회 -->
	<select id="selectUserOrder" parameterType="map" resultType="Userm">
		select nickname ,username ,userid, enrolldate, blackyn, quityn, usertype, "reportcount" from 
		(select nickname ,username ,userid, enrolldate, blackyn, quityn, usertype, count(reportedu) as "reportcount" 
		, row_number() over(
		<if test="order.equals('ida')">order by userid asc</if>
		<if test="order.equals('idd')">order by userid desc</if>
		<if test="order.equals('nicka')">order by nickname asc</if>
		<if test="order.equals('nickd')">order by nickname desc</if>
		<if test="order.equals('namea')">order by username asc</if>
		<if test="order.equals('named')">order by username desc</if>
		<if test="order.equals('enrolla')">order by enrolldate asc</if>
		<if test="order.equals('enrolld')">order by enrolldate desc</if>
		<if test="order.equals('reporta')">order by count(reportedu) asc, userid asc </if>
		<if test="order.equals('reportd')">order by count(reportedu) desc, userid asc </if>
		<if test="order.equals('quita')">order by quityn asc, userid asc </if>
		<if test="order.equals('quitd')">order by quityn desc, userid asc </if>
		) rnum from users 
		left join reportudetail on (userid = reportedu) 
		<if test="all != null"></if>
		<if test="usertype != null">where usertype like '%'||#{ usertype }||'%' </if>
		<if test="blackyn != null">where blackyn = 'Y'</if>
		<if test="quityn != null">where quityn = 'Y'</if>
		group by nickname, username, userid, enrolldate, quityn, usertype, blackyn) 
		where rnum between #{startRow} and  #{endRow}
	</select>
	<select id="selectUserOrderCount" parameterType="map" resultType="Userm">
		select count(*) from users 
		<if test="all != null"></if>
		<if test="usertype != null">where usertype like '%'||#{ usertype }||'%' </if>
		<if test="blackyn != null">where blackyn = 'Y'</if>
		<if test="quityn != null">where quityn = 'Y'</if>
	</select>
	
	<select id="selectUserListCount" resultType="int">
		select count(*) from users where usertype like 'USER'
	</select>

	<select id="selectUserEnrollDate" resultType="Users">
		select  enrolldate from users
	</select>
	
	<!-- 블랙리스트 조회 -->
	<select id="selectBlacklist" resultType="Userm">
		select * from blacklist
		join users using (userid)
		order by userid desc

	</select>
	
	<select id="selectBlacklistCount" resultType="_int">
		select count(*) from blacklist
	</select>
	
	<!-- 블랙리스트 정렬 조회 -->
	<select id="selectBlacklistOrder" resultType="Userm"
		parameterType="string">
		select * from blacklist
		join users using (userid)
		<trim prefix="order by">
			<if test="_parameter.equals('ida')"> userid asc</if>
			<if test="_parameter.equals('idd')"> userid desc</if>
			<if test="_parameter.equals('nicka')"> nickname asc</if>
			<if test="_parameter.equals('nickd')"> nickname desc</if>
			<if test="_parameter.equals('namea')"> username asc</if>
			<if test="_parameter.equals('named')"> username desc</if>
			<if test="_parameter.equals('starta')"> blackstart asc</if>
			<if test="_parameter.equals('startd')"> blackstart desc</if>
			<if test="_parameter.equals('enda')"> blackend asc</if>
			<if test="_parameter.equals('endd')"> blackend desc</if>
		</trim>
	</select> 
	
		
	
	<!-- 회원 상세 조회 -->
	<select id="selectUserDetail" resultType="Userm"
		parameterType="string">
		select * from users
		left join usersprofile using (userid)
		where userid = #{value}
	</select>

	<!-- 회원 전시내역 조회 -->
	<select id="selectUserObjet" resultType="Objet"
		parameterType="string">
		select * from objet
		where userid = #{value}
	</select>

	<!-- 회원 신고내역 조회 -->
	<select id="selectUserReport" resultType="ReportUDetail"
		parameterType="string">
		select * from reportudetail
		where reportedu = #{value}
	</select>

	<!-- 회원 신고내역 카운트 및 사유 조회 -->
	<select id="selectUserReportTotal" resultType="ReportUDetail"
		parameterType="string">
		select count(*) as "reportucount", reportureason
		from
		reportudetail
		where reportedu = #{value}
		group by reportureason
	</select>
	
	<!-- 회원 블랙리스트로 등록 -->
	<insert id="insertBlackList" parameterType="map">
		insert into blacklist values (
		#{ userid }, sysdate, 
		<if test="blackend.equals('oneweek')">sysdate+7</if>
		<if test="blackend.equals('twoweek')">sysdate+14</if>
		<if test="blackend.equals('threeweek')">sysdate+21</if>
		<if test="blackend.equals('onemonth')">sysdate+30</if>
		<if test="blackend.equals('twomonth')">sysdate+60</if>
		<if test="blackend.equals('threemonth')">sysdate+90</if>
		, #{ blackreason }
		)
	</insert>
	
	<update id="updateBlackYN" parameterType="string">
		update users set blackyn = 'Y'
		where userid = #{ value }
	</update>
	<!--  이미 있는 블랙리스트 기간 연장하기 -->
	<update id="updateBlackDate" parameterType="map">
		update blacklist set blackend = 
		<if test="blackend.equals('oneweek')">sysdate+7</if>
		<if test="blackend.equals('twoweek')">sysdate+14</if>
		<if test="blackend.equals('threeweek')">sysdate+21</if>
		<if test="blackend.equals('onemonth')">sysdate+30</if>
		<if test="blackend.equals('twomonth')">sysdate+60</if>
		<if test="blackend.equals('threemonth')">sysdate+90</if>,
		blackreason = #{ blackreason }
		where userid = #{ userid }
	</update>
	<!-- 강제탈퇴 -->
	<update id="updateQuitYN" parameterType="map">
		update users set quityn = 'Y'
		where userid = #{ userid }
	</update>
	
	<insert id="insertQuit" parameterType="map">
		insert into quit values (
		#{ userid } , 'F', #{ quitreason }, sysdate
		)
	</insert>
	<!-- 블랙리스트 해제 -->
	<delete id="deleteBlackList" parameterType="string">
		delete blacklist where userid = #{ value }
	</delete>
	<update id="updateBlackEnd" parameterType="string">
		update users set blackyn = 'N'
		where userid = #{ userid }
	</update>
	
	<!-- =========전시============ -->
	<!-- 전시 전체 목록 조회 -->
	<select id="selectAllObjet" resultType="Objet" parameterType="map">
		  select *
		from (select rownum rnum, objetno, objettitle, userid, objetstartdate, objetenddate, objettag, publicyn, objetstatus, objetregidate
		from (select * from objet)
		order by objetno desc)
   		where rnum between #{startRow} and  #{endRow} 
	</select>
	
	<!-- 전시 상태별 조회 -->
	<select id="selectStatusOrder" resultType="Objet" parameterType="map">
		select *
		from (select rownum rnum, objetno, objettitle, userid, objetstartdate, objetenddate, objettag, publicyn, objetstatus, objetregidate
		from (select * from objet)
		<if test="order.equals('ida')">order by userid asc</if>
		<if test="order.equals('idd')">order by userid desc</if>
		<if test="order.equals('titlea')">order by objettitle asc</if>
		<if test="order.equals('titled')">order by objettitle desc</if>
		<if test="order.equals('noa')">order by objetno asc</if>
		<if test="order.equals('nod')">order by objetno desc</if>
		<if test="order.equals('regia')">order by objetregidate asc</if>
		<if test="order.equals('regid')">order by objetregidate desc</if>
		<if test="order.equals('starta')">order by objetstartdate asc, userid asc </if>
		<if test="order.equals('startd')">order by objetstartdate desc, userid asc </if>
		)
   		where rnum between #{startRow} and  #{endRow} 
   		<if test="objetstatus != null">and objetstatus = #{ objetstatus }</if>
   		<if test="publicyn != null">and publicyn = #{ publicyn }</if>
   		<if test="objettag != null">and objettag like '%'||#{ objettag }||'%'</if>
   		<if test="objettitle != null">and objettitle like '%'||#{ objettitle }||'%'</if>
   		<if test="userid != null">and userid like '%'||#{ userid }||'%'</if>
	</select>
	<select id="selectStatusOrderList" resultType="int" parameterType="map">
		select count(*)  from objet 
   		where 
   		<if test="objetstatus != null">objetstatus = #{ objetstatus }</if>
   		<if test="publicyn != null">publicyn = #{ publicyn }</if>
   		<if test="objettag != null">objettag like '%'||#{ objettag }||'%'</if>
   		<if test="objettitle != null">objettitle like '%'||#{ objettitle }||'%'</if>
   		<if test="userid != null">userid like '%'||#{ userid }||'%'</if>
   		<if test="order.equals('ida')">order by userid asc</if>
		<if test="order.equals('idd')">order by userid desc</if>
		<if test="order.equals('titlea')">order by objettitle asc</if>
		<if test="order.equals('titled')">order by objettitle desc</if>
		<if test="order.equals('noa')">order by objetno asc</if>
		<if test="order.equals('nod')">order by objetno desc</if>
		<if test="order.equals('regia')">order by objetregidate asc</if>
		<if test="order.equals('regid')">order by objetregidate desc</if>
		<if test="order.equals('starta')">order by objetstartdate asc, userid asc </if>
		<if test="order.equals('startd')">order by objetstartdate desc, userid asc </if>
	</select>
	
	<select id="selectObjetListCount" resultType="int">
		select count(*)
		from objet
	</select>
	
	<!-- 전시 상세 조회 -->
	<select id="selectObjetOne" resultType="Objetm"
		parameterType="_int">
		select * 
		from objet
		join users using (userid)
		where objetno = #{value}
	</select>

	<select id="selectObjetRequestList" resultType="Objet">
		select * from
		objet where publicyn = 'W'
	</select>
	
	<!-- 전시 승인 / 반려  -->
	<update id="updateRequestStatus" parameterType="map">
		update objet set objetstatus = 'WAIT', publicyn = #{ publicyn }
		where objetno = ${ objetno } 
	</update>
	
	<update id="updateObjetStop" parameterType="int">
		update objet set objetstatus = 'CLOSE'
		where objetno = ${ value }
	</update>

	<!-- =========공지============ -->
	<!-- 공지 목록 조회 -->
	<select id="selectNoticeList" resultType="Notice">
		select *
		from notice
		order by noticeno desc
	</select>

	<!-- 공지 상세 조회 -->
	<select id="selectNoticeDetail" resultType="Notice"
		parameterType="_int">
		select *
		from notice
		where noticeno = #{ value }
	</select>

	<!-- =========QnA============ -->
	<!-- QnA 목록 조회 -->
	<select id="selectQnaList" resultType="Qna">
		select *
		from qna
		order by
		qnano asc
	</select>

	<!-- QnA 상세 조회 -->
	<select id="selectQnaDetail" resultType="Qna"
		parameterType="_int">
		select *
		from qna
		where qnano = #{ value }
	</select>

	<!-- =========FAQ============ -->
	<!-- FAQ 목록 조회 -->
	<select id="selectFaqList" resultType="Faq">
		select *
		from faq
		order by
		faqno asc
	</select>

	<!-- FAQ 상세 조회 -->
	<select id="selectFaqDetail" resultType="Faq"
		parameterType="_int">
		select *
		from faq
		where faqno = #{ value }
	</select>

	<!-- =========신고게시글============ -->
	<!-- 신고게시글 전체조회 -->
	<select id="selectReportBList" resultType="ReportBoard">
		select * from
		reportboard
	</select>

	<!-- 신고게시글 전체조회 -->
	<select id="selectReportAll" resultType="ReportBoard">
		select originno,
		reportedb ,count(originno) as "reportcount", reportbtype
		from
		reportboard
		group by originno, reportedb, reportbtype
	</select>

	<!-- 신고게시글 사유별 조회 -->
	<select id="selectReportAllList" resultType="ReportBoard"
		parameterType="map">
		select count(reportbreason) as "reportcount",
		reportbreason, reporterb, reportbdate
		from reportboard
		where originno =
		#{originno} and reportedb = #{reportedb}
		group by reportbreason,
		reporterb, reportbdate
	</select>


	<!-- 신고게시글 상세조회 -->
	<select id="selectReportBDetail" resultType="ReportBoard">
		select * from review
	</select>

	<!-- 신고게시글 상세조회 -->
	<select id="selectReportDetail" resultType="Review" parameterType="Review">
		select *
		from Review
		where objetno = #{ objetno }
		and
		revuserid = #{ revuserid }
	</select>

	<delete id="deleteReportbOrigin" parameterType="ReportBoard">
		delete
		<trim prefix="from">
			<if test="reportbtype.equals('OBJET')">objet</if>
			<if test="reportbtype.equals('REVIEW')">review</if>
		</trim>
		<where>
			objetno = #{ originno }
			<if test="reportbtype.equals('REVIEW')">
				and revuserid = #{ reportedb }
			</if>
		</where>

	</delete>
	<delete id="deleteReportb" parameterType="ReportBoard">
		delete from reportboard
		<where>
			reportbtype = #{ reportbtype }
			and originno = #{ originno }
			<if test="reportbtype.equals('REVIEW')">
				and reportedb = #{ reportedb }
			</if>
		</where>
	</delete>

	<select id="selectReportCount" resultType="ReportBoard">
		select count(originno)
		as "reportcount", originno, reportedb, reportbtype
		from reportboard
		group by reportbtype, reportedb, originno
	</select>


	<!-- 관리자 메인 -->
	<select id="selectObjetReqMain" resultType="Objet">

		select *
		from ( select rownum rnum, objetno, objettitle, userid,
		objetenddate,
		objetstartdate, objetregidate
		from ( select * from objet
		where publicyn = 'W' order by objetno desc ))
		<![CDATA[where rnum >= 1 and rnum <= 5]]>
	</select>

	<select id="selectReportMain" resultType="ReportBoard">
		select count(*) as "reportcount", reportedb, originno, reportbtype
		from ( select rownum rnum, count(*),
		originno, reportedb, reportbtype
		from ( select rownum rnum, count(*), originno, reportedb, reportbtype
		from reportboard
		group by reportedb, originno, rownum, reportbtype
		order by count(*) desc ) group by rownum, originno, reportedb,
		reportbtype)
		<![CDATA[where rnum >= 1 and rnum <= 5]]>
		group by reportedb, originno, reportbtype
	</select>

	<select id="selectQnaMain" resultType="Qna">
		select * from ( select rownum rnum, qnatitle, questiondate, userid,
		qnatype, qnano
		from ( select * from qna
		order by questiondate asc ))
		<![CDATA[where rnum >= 1 and rnum <= 5]]>
	</select>

	<select id="selectReportuMain" resultType="ReportUDetail">
		select *
		from (select rownum rnum, reportedu, blackyn, username, nickname
		from (select count(*), reportedu, blackyn, username, nickname from
		reportudetail join users on (userid= reportedu)
		group by reportedu, blackyn, username, nickname order by count(*) desc))
		<![CDATA[where rnum >= 1 and rnum <= 5]]>;
	</select>
	
	<select id="selectReportuCount" resultType="ReportUDetail">
	select count(*), reportedu from reportudetail group by reportedu;
	</select>
	
	<select id="selectReportUDetailMain" resultType="Userm">
	select count(*) as "reportcount", reportedu, blackyn, username, nickname 
	from REPORTUDETAIL 
	join users on (userid= reportedu) group by reportedu, blackyn, username, nickname
	order by count(*) desc
	</select>
	
	
	<!-- 접속 통계 -->
	<select id="selectTodayCount" resultType="LoginCount" parameterType="string">
		select * from logincount where logindate like #{ value }
	</select>
	
	<!-- 로그인 카운트 -->
	<update id="updateLoginCount" parameterType="string">
	 update logincount set 
	 ${value} = (${value}+1)
	 where logindate like sysdate
	</update>
	<insert id="insertLoginCount">
	insert into logincount values (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, to_char(sysdate, 'yy/MM/dd'))
	</insert>
	<select id="selectLoginDate" resultType="string">
	select logindate from logincount where logindate like to_char(sysdate, 'yy/MM/dd')
	</select>
	<!-- 회원가입 카운트 -->
	<select id="selectEnrollCount" resultType="Users">
	select to_date(to_char(enrolldate, 'yy/MM/dd')) as "enrolldate" from users 
	</select>
</mapper> 
