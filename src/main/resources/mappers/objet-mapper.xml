<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="objetMapper">
<!-- 오브제 전체 리스트   -->
<select id="selectObjetAll" resultType="Objet">
 select objetno, userid, objettitle, objetintro, originmainposter, renamemainposter, objetstartdate, objetenddate, objettag, publicyn, objetregidate, objetstatus, objetview 
 from objet
 where objetstatus = 'OPEN' and publicyn = 'Y' or objetstatus = 'STANDBY' 
 order by objetstartdate desc
 </select>
 
 <!-- 작가 전체 리스트   -->
<select id="selectArtistAll" resultType="Artist">
select distinct userid, usertype, username, nickname, quityn, blackyn, useropic, userrpic,
userintros, userintrol, usertag, portfolio, objetstatus, originmainposter, renamemainposter, objettag
from (select a.userid, a.usertype, a.username, a.nickname, a.quityn, a.blackyn, b.useropic, b.userrpic, b.userintros, b.userintrol, b.usertag, b.portfolio, 
c.objetstatus, c.originmainposter, c.renamemainposter, c.objettag from users a
join usersprofile b on a.userid = b.userid
left outer join objet c on a.userid = c.userid
where quityn = 'N' and blackyn = 'N')
order by objetstatus asc
</select>

<!-- 작가 전체 리스트 정렬  -->
<select id="selectArtistListOrder" resultType="Artist" parameterType="string">
select distinct userid, usertype, username, nickname, quityn, blackyn, useropic, userrpic,
userintros, userintrol, usertag, portfolio, objetstatus, originmainposter, renamemainposter, objettag
from (select a.userid, a.usertype, a.username, a.nickname, a.quityn, a.blackyn, b.useropic, b.userrpic, b.userintros, b.userintrol, b.usertag, b.portfolio, 
c.objetstatus, c.originmainposter, c.renamemainposter, c.objettag from users a
join usersprofile b on a.userid = b.userid
left outer join objet c on a.userid = c.userid
where quityn = 'N' and blackyn = 'N')
<trim prefix="order by">
<if test="_parameter=='statusdesc'"> objetstatus desc</if>
<if test="_parameter=='nameasc'"> nickname asc</if>
</trim>
</select>
 
<!-- 오브제 검색 결과 리스트(전시/작가)  -->
<select id="selectobjetSearchList" resultType="Objet">
 select * from objet where objettitle like '%' || #{objettitle} || '%' or objetintro like #{objetintro} order by #{objetstartdate} asc
</select>
<select id="selectartistSearchList" resultType="Artist">
 select * form objet a join users b on a.userid = b.userid where a.userid like '%' || #{userid} || '%' or nickname like '%' || #{nickname} || '%' order by #{objetstartdate} asc
</select> 
 
 <!-- 오브제 하나   -->
 <select id="selectObjetOne" parameterType="int" resultType="Artist">
 select * from objet a
 join usersprofile b on a.userid = b.userid
 join users c on a.userid = c.userid
 where objetno = #{objetno}
 </select>
 
 <!-- 관심 오브제 하나 -->
 <select id="selectLikeObjetOne" resultType="int" parameterType="LikeObjet">
 	select count(*) from likeobjet where userid = #{userid} and objetno = #{objetno}
 </select>
 
 <!-- 관심 오브제 리스트  -->
 <select id="selectLikeObjet" resultType="LikeObjet" parameterType="int">
 	select * from likeobjet where objetno = #{objetno}
 </select>
 
 <!-- 관심 오브제 추가  -->
 <insert id="insertLikeObjet" parameterType="LikeObjet">
 	insert into likeobjet values(#{objetno}, #{userid}, sysdate)
 </insert>
 
 <!-- 관심 오브제 삭제  -->
 <delete id="deleteLikeObjet" parameterType="LikeObjet">
	delete from likeobjet where userid = #{userid} and objetno = #{objetno}
 </delete>
 
 <!-- 전시 신고 -->
 <insert id="insertObjetReport" parameterType="ReportBoard">
 	insert into reportboard values 
 	(#{originno}, #{reportedb}, #{reporterb}, #{reportbtype}, sysdate, #{reportbreason}) 
 </insert>
 
 <!-- 한줄평 리스트  -->
 <select id="selectReview" parameterType="int" resultType="Review">
 select a.revuserid, a.objetno, a.revcontent, a.revstars, a.revdate, b.userrpic, c.nickname, count(d.revgood) revgood, count(d.revhate) revhate
 from review a
 join usersprofile b on a.revuserid = b.userid
 join users c on a.revuserid = c.userid
 join reviewstatus d on a.revuserid = d.revuserid
 where a.objetno = #{objetno}
 group by a.revuserid, a.objetno, a.revcontent, a.revstars, a.revdate, b.userrpic, c.nickname
 order by a.revdate desc
 </select>
 
 <!-- 한줄평 리스트 정렬  -->
 <select id="selectReviewOrder" parameterType="ReviewKey" resultType="Review">
 select a.revuserid, a.objetno, a.revcontent, a.revstars, a.revdate, b.userrpic, c.nickname, count(d.revgood) revgood, count(d.revhate) revhate
 from review a
 join usersprofile b on a.revuserid = b.userid
 join users c on a.revuserid = c.userid
 join reviewstatus d on a.revuserid = d.revuserid
 where a.objetno = #{objetno}
 group by a.revuserid, a.objetno, a.revcontent, a.revstars, a.revdate, b.userrpic, c.nickname
<trim prefix="order by">
<if test="order=='reviewdatedesc'"> a.revdate desc</if>
<if test="order=='reviewstardesc'"> a.revstars desc</if>
</trim>
 </select>
 
 <!-- 내 한줄평 -->
 <select id="selectReviewOne" parameterType="ReviewKey" resultType="Review">
 select a.revuserid, a.objetno, a.revcontent, a.revstars, a.revdate, b.userrpic, c.nickname, count(d.revgood) revgood, count(d.revhate) revhate
 from review a
 join usersprofile b on a.revuserid = b.userid
 join users c on a.revuserid = c.userid
 join reviewstatus d on a.revuserid = d.revuserid
 where a.revuserid = #{userid} and a.objetno = #{objetno}
 group by a.revuserid, a.objetno, a.revcontent, a.revstars, a.revdate, b.userrpic, c.nickname
 order by a.revdate desc
 </select>
 
<!-- 한줄평 등록 -->
<insert id="insertReview" parameterType="Review">
	insert into review values (#{revuserid}, #{objetno}, #{revcontent}, #{revstars}, sysdate) 
</insert>

<!-- 한줄평 수정 -->
<update id="updateReview" parameterType="ReviewUp">
	update review set revcontent = #{revcontent}, revstars = #{revstars}, revdate = sysdate 
	where revuserid = #{revuserid} and objetno = #{objetno}
</update>

<!-- 한줄평 삭제 -->
<delete id="deleteReview" parameterType="Review">
	delete from review where revuserid = #{revuserid} and objetno = #{objetno}
</delete>

<!-- 한줄평 신고 -->
 <insert id="insertReviewReport" parameterType="ReportBoard">
 	insert into reportboard values 
 	(#{originno}, #{reportedb}, #{reporterb}, #{reportbtype}, sysdate, #{reportbreason})  
 </insert>
 
 <!-- 한줄평 평가 리스트 -->
 <select id="selectReivewStatus" parameterType="ReviewStatus" resultType="ReviewStatus">
 	 select *
	 from reviewstatus
	 where userid = #{userid} and objetno = #{objetno}
 </select>
 
 <!-- 한줄평 좋아요  체크 -->
 <select id="selectRevGoodChk" parameterType="ReviewStatus" resultType="int">
 	select count(*) from reviewstatus where revuserid = #{revuserid} and userid = #{userid} and objetno = #{objetno}
 </select>
 
 <!-- 한줄평 좋아요 -->
 <update id="updateRevGood" parameterType="ReviewStatus">
 	update reviewstatus set revgood = #{revgood} where revuserid = #{revuserid} and userid = #{userid} and objetno = #{objetno}
 </update>
 
  <!-- 한줄평 싫어요 -->
 <update id="updateRevHate" parameterType="ReviewStatus">
 	update reviewstatus set revhate = #{revhate} where revuserid = #{revuserid} and userid = #{userid} and objetno = #{objetno}
 </update>
 
 
 <!-- 최민영 *************************** -->
 	<select id="selectArtistObjetGetListCount" parameterType="string" resultType="int">
 		select count(*) from objet where userid = #{userid} and objetstatus in ('STANDBY', 'OPEN', 'CLOSE')
 	</select>
 
	 <select id="selectArtistObjetList" parameterType="hashmap" resultType="objet">
	 	select * from (
	 	select rownum rnum, objetno, userid, objettitle, objetintro, originmainposter, renamemainposter, objetstartdate, objetenddate, objettag, publicyn, objetregidate, objetstatus, objetview
		from (select objetno, userid, objettitle, objetintro, originmainposter, renamemainposter,objetstartdate, objetenddate, objettag, publicyn, objetregidate, objetstatus, objetview from (select * from objet where publicyn = 'Y')
		where userid = #{userid} and objetstatus in ('STANDBY', 'OPEN', 'CLOSE') order by decode(objetstatus, 'OPEN',1,'STANDBY', 2, 3))) <![CDATA[ where rnum between #{startRow} and #{endRow} ]]>
	 </select>
	 
	 <select id="selectArtistObjetSearch" parameterType="hashmap" resultType="objet">
	 	select * from (
	 	select objetno, userid, objettitle, objetintro, originmainposter, renamemainposter, objetstartdate, objetenddate, objettag, publicyn, objetregidate, objetstatus, objetview
		from (select objetno, userid, objettitle, objetintro, originmainposter, renamemainposter,objetstartdate, objetenddate, objettag, publicyn, objetregidate, objetstatus, objetview from (select * from objet where publicyn = 'Y')
		where objettitle like '%' || #{objettitle} || '%' and objetstatus in ('STANDBY', 'OPEN', 'CLOSE') order by decode(objetstatus, 'OPEN',1,'STANDBY', 2, 3))) where userid = #{userid}
	 </select>
 
</mapper>
